using System;
using System.Collections;
using System.Collections.Generic;
using System.Linq;
using System.Windows;
using System.Windows.Markup;
using Microsoft.Extensions.Logging;
using Microsoft.Extensions.Logging.Abstractions;
using VacuumBreather.Mvvm.Core;

namespace VacuumBreather.Mvvm.Wpf;

/// <summary>Creates data templates for view-models.</summary>
internal static class DataTemplateManager
{
    private static ILogger? _logger;

    /// <summary>
    ///     Gets or sets the logger for the <see cref="DataTemplateManager" />.
    /// </summary>
    /// <value>
    ///     The logger for the <see cref="DataTemplateManager" />.
    /// </value>
    internal static ILogger Logger
    {
        get => _logger ?? NullLogger.Instance;
        set => _logger = value;
    }

    /// <summary>
    ///     Creates data templates for all view-model types found in the specified
    ///     <see cref="TypeFilters" />.
    /// </summary>
    /// <param name="viewLocator">The view locator used to map view-model to view types.</param>
    /// <param name="viewModelTypes">The sequence of all view-model types used by the application.</param>
    /// <param name="resourceDictionary">
    ///     The <see cref="IDictionary" /> to register the data templates in.
    /// </param>
    /// <param name="onRegister">A callback to execute whenever a data template was registered.</param>
    public static void RegisterDataTemplates(ViewLocator viewLocator,
                                             IEnumerable<Type> viewModelTypes,
                                             IDictionary resourceDictionary,
                                             Action<DataTemplate> onRegister)
    {
        viewModelTypes
            .Where(type => Attribute.GetCustomAttribute(type, typeof(NoAutoGeneratedDataTemplateAttribute)) is null)
            .Select(vmType => (vmType, viewLocator.LocateViewTypeForViewModelType(vmType)))
            .ForEach(((Type ViewModelType, Type? ViewType) mapping) =>
            {
                RegisterDataTemplate(mapping.ViewModelType, mapping.ViewType, resourceDictionary, onRegister);
            });
    }

    private static DataTemplate CreateTemplate(Type viewModelType, Type? viewType)
    {
        string xamlTemplate;

        if (viewType is { })
        {
            Logger.LogDebug("Creating data template for {ViewModel}", viewModelType);

            xamlTemplate = "<DataTemplate\n" +
                           "  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n" +
                           "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n" +
                           $"  xmlns:vm=\"clr-namespace:{viewModelType.Namespace};assembly={viewModelType.Assembly.GetName().Name}\"\n" +
                           $"  xmlns:cal=\"clr-namespace:{typeof(View).Namespace};assembly={typeof(View).Assembly.GetName().Name}\"\n" +
                           $"  DataType=\"{{x:Type vm:{viewModelType.Name}}}\">\n" +
                           "    <ContentPresenter cal:View.IsGenerated=\"True\" cal:View.Model=\"{Binding Mode=OneTime}\" />\n" +
                           "</DataTemplate>";
        }
        else if (viewModelType.IsDerivedFromOrImplements(typeof(DialogScreen)))
        {
            Logger.LogWarning("Creating placeholder dialog template for {ViewModel}", viewModelType);

            xamlTemplate = "<DataTemplate\n" +
                           "    xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n" +
                           $"    xmlns:vm=\"clr-namespace:{viewModelType.Namespace};assembly={viewModelType.Assembly.GetName().Name}\"\n" +
                           $"    xmlns:wpf=\"clr-namespace:{typeof(DialogResult).Namespace};assembly={typeof(DialogResult).Assembly.GetName().Name}\"\n" +
                           $"    xmlns:cal=\"clr-namespace:{typeof(View).Namespace};assembly={typeof(View).Assembly.GetName().Name}\"\n" +
                           "    xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n" +
                           "    xmlns:mc=\"http://schemas.openxmlformats.org/markup-compatibility/2006\"\n" +
                           "    xmlns:system=\"clr-namespace:System;assembly=mscorlib\"\n" +
                           $"    DataType=\"{{x:Type vm:{viewModelType.Name}}}\">\n" +
                           "    <Grid\n" +
                           "      TextElement.FontSize=\"18\"\n" +
                           "      TextElement.FontWeight=\"DemiBold\">\n" +
                           "        <Border\n" +
                           "            HorizontalAlignment=\"Center\"\n" +
                           "            VerticalAlignment=\"Center\"\n" +
                           "            Background=\"Maroon\"\n" +
                           "            BorderBrush=\"Black\"\n" +
                           "            BorderThickness=\"2\">\n" +
                           "            <StackPanel>\n" +
                           "                <Grid Height=\"100\">\n" +
                           "                    <TextBlock Foreground=\"#DDDDDD\" HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\">\n" +
                           $"                        Placeholder view for {viewModelType.Name}.\n" +
                           "                    </TextBlock>\n" +
                           "                </Grid>\n" +
                           "                <UniformGrid Columns=\"3\">\n" +
                           "                    <Button\n" +
                           "                        Width=\"200\"\n" +
                           "                        Height=\"50\"\n" +
                           "                        Margin=\"10\"\n" +
                           $"                        wpf:{nameof(CloseDialog)}.Result=\"{{x:Static wpf:{nameof(DialogResult)}.{nameof(DialogResult.Yes)}}}\">\n" +
                           "                        Yes\n" +
                           "                    </Button>\n" +
                           "                    <Button\n" +
                           "                        Width=\"200\"\n" +
                           "                        Height=\"50\"\n" +
                           "                        Margin=\"10\"\n" +
                           $"                        wpf:{nameof(CloseDialog)}.Result=\"{{x:Static wpf:{nameof(DialogResult)}.{nameof(DialogResult.No)}}}\">\n" +
                           "                        No\n" +
                           "                    </Button>\n" +
                           "                    <Button\n" +
                           "                        Width=\"200\"\n" +
                           "                        Height=\"50\"\n" +
                           "                        Margin=\"10\"\n" +
                           $"                        wpf:{nameof(CloseDialog)}.Result=\"{{x:Static wpf:{nameof(DialogResult)}.{nameof(DialogResult.Cancel)}}}\">\n" +
                           "                        Cancel\n" +
                           "                    </Button>\n" +
                           "                </UniformGrid>\n" +
                           "            </StackPanel>\n" +
                           "        </Border>\n" +
                           "    </Grid>\n" +
                           "</DataTemplate>";
        }
        else
        {
            Logger.LogWarning("Creating placeholder data template for {ViewModel}", viewModelType);

            xamlTemplate = "<DataTemplate\n" +
                           "  xmlns=\"http://schemas.microsoft.com/winfx/2006/xaml/presentation\"\n" +
                           "  xmlns:x=\"http://schemas.microsoft.com/winfx/2006/xaml\"\n" +
                           $"  xmlns:vm=\"clr-namespace:{viewModelType.Namespace};assembly={viewModelType.Assembly.GetName().Name}\"\n" +
                           $"  xmlns:cal=\"clr-namespace:{typeof(View).Namespace};assembly={typeof(View).Assembly.GetName().Name}\"\n" +
                           $"  DataType=\"{{x:Type vm:{viewModelType.Name}}}\">\n" +
                           "  <Border Background=\"Maroon\">\n" +
                           $"    <TextBlock Margin=\"5\" Foreground=\"#DDDDDD\" FontWeight=\"DemiBold\" FontSize=\"18\" HorizontalAlignment=\"Center\" VerticalAlignment=\"Center\" Text=\"Placeholder view for {viewModelType.Name}.\" />\n" +
                           "  </Border>\n</DataTemplate>";
        }

        return (DataTemplate)XamlReader.Parse(xamlTemplate);
    }

    private static void RegisterDataTemplate(Type viewModelType,
                                             Type? viewType,
                                             IDictionary dictionary,
                                             Action<DataTemplate> onRegister)
    {
        DataTemplate dataTemplate = CreateTemplate(viewModelType, viewType);
        onRegister(dataTemplate);
        dataTemplate.Seal();

        dictionary[dataTemplate.DataTemplateKey!] = dataTemplate;
    }
}