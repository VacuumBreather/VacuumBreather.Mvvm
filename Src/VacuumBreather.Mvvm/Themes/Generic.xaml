<ResourceDictionary
    xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
    xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
    xmlns:dialogs="clr-namespace:VacuumBreather.Mvvm.Wpf.Dialogs"
    xmlns:notifications="clr-namespace:VacuumBreather.Mvvm.Wpf.Notifications"
    xmlns:transitions="clr-namespace:VacuumBreather.Mvvm.Wpf.Transitions"
    xmlns:valueConverters="clr-namespace:VacuumBreather.Mvvm.Wpf.ValueConverters">

    <!--  DataTemplate.QueryDialog.Implicit  -->
    <DataTemplate DataType="{x:Type dialogs:QueryDialog}">
        <DataTemplate.Resources>
            <valueConverters:ChainConverter x:Key="Converter.EnumFlagSetToVisible">
                <valueConverters:ChainConverter.Converters>
                    <valueConverters:EnumFlagSetToBooleanConverter />
                    <valueConverters:BoolToVisibilityConverter />
                </valueConverters:ChainConverter.Converters>
            </valueConverters:ChainConverter>
            <valueConverters:IsEqualConverter x:Key="Converter.IsEqualTo" />
        </DataTemplate.Resources>
        <DockPanel>
            <TextBlock
                HorizontalAlignment="Left"
                DockPanel.Dock="Top"
                FontSize="18"
                FontWeight="DemiBold"
                Text="{Binding Title, Mode=OneWay}"
                TextAlignment="Center" />
            <StackPanel
                HorizontalAlignment="Right"
                VerticalAlignment="Bottom"
                DockPanel.Dock="Bottom"
                Orientation="Horizontal">
                <Button
                    Width="100"
                    Height="40"
                    dialogs:CloseDialog.Result="Ok"
                    Content="OK"
                    IsDefault="{Binding DefaultResult, Mode=OneWay, Converter={StaticResource Converter.IsEqualTo}, ConverterParameter={x:Static dialogs:DialogResult.Ok}}"
                    Visibility="{Binding DialogResults, Mode=OneWay, Converter={StaticResource Converter.EnumFlagSetToVisible}, ConverterParameter={x:Static dialogs:DialogResults.Ok}}" />
                <Button
                    Width="100"
                    Height="40"
                    dialogs:CloseDialog.Result="Yes"
                    Content="Yes"
                    IsDefault="{Binding DefaultResult, Mode=OneWay, Converter={StaticResource Converter.IsEqualTo}, ConverterParameter={x:Static dialogs:DialogResult.Yes}}"
                    Visibility="{Binding DialogResults, Mode=OneWay, Converter={StaticResource Converter.EnumFlagSetToVisible}, ConverterParameter={x:Static dialogs:DialogResults.Yes}}" />
                <Button
                    Width="100"
                    Height="40"
                    dialogs:CloseDialog.Result="No"
                    Content="No"
                    IsDefault="{Binding DefaultResult, Mode=OneWay, Converter={StaticResource Converter.IsEqualTo}, ConverterParameter={x:Static dialogs:DialogResult.No}}"
                    Visibility="{Binding DialogResults, Mode=OneWay, Converter={StaticResource Converter.EnumFlagSetToVisible}, ConverterParameter={x:Static dialogs:DialogResults.No}}" />
                <Button
                    Width="100"
                    Height="40"
                    dialogs:CloseDialog.Result="Cancel"
                    Content="Cancel"
                    IsDefault="{Binding DefaultResult, Mode=OneWay, Converter={StaticResource Converter.IsEqualTo}, ConverterParameter={x:Static dialogs:DialogResult.Cancel}}"
                    Visibility="{Binding DialogResults, Mode=OneWay, Converter={StaticResource Converter.EnumFlagSetToVisible}, ConverterParameter={x:Static dialogs:DialogResults.Cancel}}" />
            </StackPanel>
            <TextBlock
                Margin="0,20"
                HorizontalAlignment="Left"
                VerticalAlignment="Center"
                Text="{Binding Content, Mode=OneWay}"
                TextAlignment="Center" />
        </DockPanel>
    </DataTemplate>

    <!--  DataTemplate.NotificationScreen.Implicit  -->
    <DataTemplate DataType="{x:Type notifications:NotificationScreen}">
        <Border
            Name="BackgroundBorder"
            MinHeight="75"
            Padding="25,15"
            Background="CornflowerBlue"
            CornerRadius="4">
            <StackPanel HorizontalAlignment="Left" VerticalAlignment="Top">
                <TextBlock
                    FontSize="14"
                    FontWeight="DemiBold"
                    Text="{Binding Title, Mode=OneWay}"
                    TextWrapping="Wrap" />
                <TextBlock
                    FontSize="14"
                    Text="{Binding Content, Mode=OneWay}"
                    TextWrapping="Wrap" />
            </StackPanel>
        </Border>
        <DataTemplate.Triggers>
            <DataTrigger Binding="{Binding Type, Mode=OneWay}" Value="{x:Static notifications:NotificationType.Information}">
                <Setter TargetName="BackgroundBorder" Property="Background" Value="CornflowerBlue" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type, Mode=OneWay}" Value="{x:Static notifications:NotificationType.Success}">
                <Setter TargetName="BackgroundBorder" Property="Background" Value="ForestGreen" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type, Mode=OneWay}" Value="{x:Static notifications:NotificationType.Warning}">
                <Setter TargetName="BackgroundBorder" Property="Background" Value="DarkOrange" />
            </DataTrigger>
            <DataTrigger Binding="{Binding Type, Mode=OneWay}" Value="{x:Static notifications:NotificationType.Error}">
                <Setter TargetName="BackgroundBorder" Property="Background" Value="Red" />
            </DataTrigger>
        </DataTemplate.Triggers>
    </DataTemplate>

    <!--  ControlTemplate.Transitioner  -->
    <ControlTemplate x:Key="ControlTemplate.Transitioner" TargetType="{x:Type transitions:Transitioner}">
        <Border
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <Grid x:Name="ItemsPresenter" IsItemsHost="True" />
        </Border>
        <ControlTemplate.Triggers>
            <Trigger Property="SelectedIndex" Value="-1">
                <Setter TargetName="ItemsPresenter" Property="Visibility" Value="Hidden" />
            </Trigger>
        </ControlTemplate.Triggers>
    </ControlTemplate>

    <!--  ControlTemplate.TransitionSubjectBase  -->
    <ControlTemplate x:Key="ControlTemplate.TransitionSubjectBase" TargetType="{x:Type transitions:TransitionSubjectBase}">
        <Border
            x:Name="Border"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}">
            <ContentPresenter
                x:Name="ContentPresenter"
                Content="{TemplateBinding ContentControl.Content}"
                ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}"
                RenderTransformOrigin=".5,.5">
                <ContentPresenter.RenderTransform>
                    <TransformGroup>
                        <MatrixTransform x:Name="PART_MatrixTransform" />
                        <RotateTransform x:Name="PART_RotateTransform" Angle="0" />
                        <ScaleTransform x:Name="PART_ScaleTransform" ScaleX="1" ScaleY="1" />
                        <SkewTransform x:Name="PART_SkewTransform" AngleX="0" AngleY="0" />
                        <TranslateTransform x:Name="PART_TranslateTransform" X="0" Y="0" />
                    </TransformGroup>
                </ContentPresenter.RenderTransform>
            </ContentPresenter>
        </Border>
    </ControlTemplate>

    <!--  ControlTemplate.DialogItem  -->
    <ControlTemplate x:Key="ControlTemplate.DialogItem" TargetType="{x:Type dialogs:DialogItem}">
        <Border
            x:Name="Border"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding Border.CornerRadius}"
            RenderTransformOrigin=".5,.5">
            <ContentPresenter
                x:Name="ContentPresenter"
                Content="{TemplateBinding ContentControl.Content}"
                ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
            <Border.RenderTransform>
                <TransformGroup>
                    <MatrixTransform x:Name="PART_MatrixTransform" />
                    <RotateTransform x:Name="PART_RotateTransform" Angle="0" />
                    <ScaleTransform x:Name="PART_ScaleTransform" ScaleX="1" ScaleY="1" />
                    <SkewTransform x:Name="PART_SkewTransform" AngleX="0" AngleY="0" />
                    <TranslateTransform x:Name="PART_TranslateTransform" X="0" Y="0" />
                </TransformGroup>
            </Border.RenderTransform>
        </Border>
    </ControlTemplate>

    <!--  ControlTemplate.DialogHost  -->
    <ControlTemplate x:Key="ControlTemplate.DialogHost" TargetType="{x:Type dialogs:DialogHost}">
        <Grid
            x:Name="PART_RootGrid"
            Background="{TemplateBinding OverlayBackgroundBrush}"
            Visibility="Collapsed">
            <dialogs:DialogItem
                HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                Content="{TemplateBinding Content}"
                Style="{TemplateBinding DialogContainerStyle}" />
        </Grid>
    </ControlTemplate>

    <!--  Style.Button.CloseNotifications  -->
    <Style x:Key="Style.Button.CloseNotifications" TargetType="{x:Type Button}">
        <Setter Property="Background" Value="Transparent" />
        <Setter Property="Width" Value="16" />
        <Setter Property="Height" Value="16" />
        <Setter Property="Template">
            <Setter.Value>
                <ControlTemplate TargetType="{x:Type Button}">
                    <Border Padding="2" Background="{TemplateBinding Background}">
                        <Viewbox>
                            <Path
                                Width="16"
                                Height="16"
                                Data="M0,0 L16,16 M16,0 L0,16 Z"
                                Stroke="{TemplateBinding Foreground}"
                                StrokeThickness="2" />
                        </Viewbox>
                    </Border>
                </ControlTemplate>
            </Setter.Value>
        </Setter>
    </Style>

    <!--  ControlTemplate.NotificationItem  -->
    <ControlTemplate x:Key="ControlTemplate.NotificationItem" TargetType="{x:Type notifications:NotificationItem}">
        <Border
            x:Name="Border"
            Padding="{TemplateBinding Padding}"
            Background="{TemplateBinding Background}"
            BorderBrush="{TemplateBinding BorderBrush}"
            BorderThickness="{TemplateBinding BorderThickness}"
            CornerRadius="{TemplateBinding Border.CornerRadius}"
            RenderTransformOrigin=".5,.5">
            <Grid>
                <ContentPresenter
                    x:Name="ContentPresenter"
                    HorizontalAlignment="{TemplateBinding HorizontalContentAlignment}"
                    VerticalAlignment="{TemplateBinding VerticalContentAlignment}"
                    Content="{TemplateBinding ContentControl.Content}"
                    ContentStringFormat="{TemplateBinding ContentControl.ContentStringFormat}"
                    ContentTemplate="{TemplateBinding ContentControl.ContentTemplate}"
                    ContentTemplateSelector="{TemplateBinding ContentControl.ContentTemplateSelector}" />
                <Button
                    Margin="10"
                    HorizontalAlignment="Right"
                    VerticalAlignment="Top"
                    Command="{x:Static notifications:NotificationItem.CloseCommand}"
                    Style="{StaticResource Style.Button.CloseNotifications}" />
            </Grid>
            <Border.RenderTransform>
                <TransformGroup>
                    <MatrixTransform x:Name="PART_MatrixTransform" />
                    <RotateTransform x:Name="PART_RotateTransform" Angle="0" />
                    <ScaleTransform x:Name="PART_ScaleTransform" ScaleX="1" ScaleY="1" />
                    <SkewTransform x:Name="PART_SkewTransform" AngleX="0" AngleY="0" />
                    <TranslateTransform x:Name="PART_TranslateTransform" X="0" Y="0" />
                </TransformGroup>
            </Border.RenderTransform>
            <Border.LayoutTransform>
                <ScaleTransform x:Name="PART_LayoutScaleTransform" ScaleX="1" ScaleY="1" />
            </Border.LayoutTransform>
        </Border>
    </ControlTemplate>

    <!--  ControlTemplate.NotificationHost  -->
    <ControlTemplate x:Key="ControlTemplate.NotificationHost" TargetType="{x:Type notifications:NotificationHost}">
        <DockPanel x:Name="PART_RootPanel">
            <notifications:NotificationPanel
                x:Name="PART_ItemsPresenter"
                IsItemsHost="True"
                MaxDisplayedElements="{TemplateBinding MaxDisplayedElements}"
                SeparatorBrush="Transparent"
                SeparatorMargin="0"
                SeparatorThickness="3" />
        </DockPanel>
    </ControlTemplate>

    <!--  Style.Transitioner  -->
    <Style x:Key="Style.Transitioner" TargetType="{x:Type transitions:Transitioner}">
        <Setter Property="ClipToBounds" Value="True" />
        <Setter Property="Template" Value="{StaticResource ControlTemplate.Transitioner}" />
    </Style>

    <!--  Style.TransitionSubjectBase  -->
    <Style x:Key="Style.TransitionSubjectBase" TargetType="{x:Type transitions:TransitionSubjectBase}">
        <Setter Property="KeyboardNavigation.IsTabStop" Value="False" />
        <Setter Property="Template" Value="{StaticResource ControlTemplate.TransitionSubjectBase}" />
    </Style>

    <!--  Style.TransitionerItem  -->
    <Style
        x:Key="Style.TransitionerItem"
        BasedOn="{StaticResource Style.TransitionSubjectBase}"
        TargetType="{x:Type transitions:TransitionerItem}">
        <Style.Resources>
            <valueConverters:NotZeroConverter x:Key="NotZeroConverter" />
        </Style.Resources>
        <Setter Property="RenderTransformOrigin" Value=".5,.5" />
        <Setter Property="IsEnabled" Value="False" />
        <Setter Property="Visibility" Value="Hidden" />
        <Style.Triggers>
            <Trigger Property="State" Value="Current">
                <Setter Property="Visibility" Value="Visible" />
                <Setter Property="IsEnabled" Value="True" />
            </Trigger>
            <MultiDataTrigger>
                <MultiDataTrigger.Conditions>
                    <Condition Binding="{Binding State, RelativeSource={RelativeSource Self}}" Value="Previous" />
                    <Condition Binding="{Binding Opacity, RelativeSource={RelativeSource Self}, Converter={StaticResource NotZeroConverter}}" Value="True" />
                </MultiDataTrigger.Conditions>
                <Setter Property="Visibility" Value="Visible" />
            </MultiDataTrigger>
        </Style.Triggers>
    </Style>

    <!--  Style.TransitioningContentControl  -->
    <Style
        x:Key="Style.TransitioningContentControl"
        BasedOn="{StaticResource Style.TransitionSubjectBase}"
        TargetType="{x:Type transitions:TransitioningContentControl}" />

    <!--  Style.DialogItem  -->
    <Style
        x:Key="Style.DialogItem"
        BasedOn="{StaticResource Style.TransitioningContentControl}"
        TargetType="{x:Type dialogs:DialogItem}">
        <Setter Property="MinWidth" Value="480" />
        <Setter Property="MinHeight" Value="320" />
        <Setter Property="Padding" Value="20" />
        <Setter Property="Border.CornerRadius" Value="8" />
        <Setter Property="Background" Value="#FF888888" />
        <Setter Property="TransitionTriggers" Value="ContentChanged" />
        <Setter Property="TransitionEffect" Value="{transitions:ZoomInTransition}" />
        <Setter Property="Template" Value="{StaticResource ControlTemplate.DialogItem}" />
    </Style>

    <!--  Style.DialogHost  -->
    <Style x:Key="Style.DialogHost" TargetType="{x:Type dialogs:DialogHost}">
        <Setter Property="DialogContainerStyle" Value="{StaticResource Style.DialogItem}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource ControlTemplate.DialogHost}" />
    </Style>

    <!--  Style.DialogItem  -->
    <Style
        x:Key="Style.NotificationItem"
        BasedOn="{StaticResource Style.TransitioningContentControl}"
        TargetType="{x:Type notifications:NotificationItem}">
        <Setter Property="MaxWidth" Value="300" />
        <Setter Property="MinWidth" Value="300" />
        <Setter Property="Width" Value="300" />
        <Setter Property="HorizontalContentAlignment" Value="Stretch" />
        <Setter Property="VerticalContentAlignment" Value="Stretch" />
        <Setter Property="Border.CornerRadius" Value="4" />
        <Setter Property="TransitionEffect" Value="{transitions:ZoomInTransition}" />
        <Setter Property="CloseTransitionEffect" Value="{transitions:ShrinkOutTransition Duration='0:0:0.333'}" />
        <Setter Property="Template" Value="{StaticResource ControlTemplate.NotificationItem}" />
    </Style>

    <!--  Style.NotificationHost  -->
    <Style x:Key="Style.NotificationHost" TargetType="{x:Type notifications:NotificationHost}">
        <Setter Property="ItemContainerStyle" Value="{StaticResource Style.NotificationItem}" />
        <Setter Property="HorizontalContentAlignment" Value="Center" />
        <Setter Property="VerticalContentAlignment" Value="Center" />
        <Setter Property="Template" Value="{StaticResource ControlTemplate.NotificationHost}" />
    </Style>

    <!--  Style.TransitionSubjectBase.Implicit  -->
    <Style BasedOn="{StaticResource Style.TransitionSubjectBase}" TargetType="{x:Type transitions:TransitionSubjectBase}" />

    <!--  Style.Transitioner.Implicit  -->
    <Style BasedOn="{StaticResource Style.Transitioner}" TargetType="{x:Type transitions:Transitioner}" />

    <!--  Style.TransitionerItem.Implicit  -->
    <Style BasedOn="{StaticResource Style.TransitionerItem}" TargetType="{x:Type transitions:TransitionerItem}" />

    <!--  Style.TransitioningContentControl.Implicit  -->
    <Style BasedOn="{StaticResource Style.TransitioningContentControl}" TargetType="{x:Type transitions:TransitioningContentControl}" />

    <!--  Style.DialogItem.Implicit  -->
    <Style BasedOn="{StaticResource Style.DialogItem}" TargetType="{x:Type dialogs:DialogItem}" />

    <!--  Style.DialogHost.Implicit  -->
    <Style BasedOn="{StaticResource Style.DialogHost}" TargetType="{x:Type dialogs:DialogHost}" />

    <!--  Style.NotificationItem.Implicit  -->
    <Style BasedOn="{StaticResource Style.NotificationItem}" TargetType="{x:Type notifications:NotificationItem}" />

    <!--  Style.NotificationHost.Implicit  -->
    <Style BasedOn="{StaticResource Style.NotificationHost}" TargetType="{x:Type notifications:NotificationHost}" />

</ResourceDictionary>